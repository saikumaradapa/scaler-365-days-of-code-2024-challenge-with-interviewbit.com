from collections import deque
class Solution:
	def minDepth(self, A):
        q = deque([(A, 1)])
        while q:
            node, depth = q.popleft()
            if node:
                if not node.left and not node.right:
                    return depth 
                
                if node.left:
                    q.append((node.left, depth+1))
                if node.right:
                    q.append((node.right, depth+1))
        return -1

''' time complexity : O(n)            # BFS solution       
    space complexity : O(n)
'''


#################################################################################################################################################################################################################################

class Solution:
    def dfs(self, root, curr, res):
        if not root:
            return 
        if not root.left and not root.right:
            res[0] = min(res[0], curr)  
            return 
        self.dfs(root.left, curr+1, res)
        self.dfs(root.right, curr+1, res)

    def minDepth(self, root):
        res = [float('inf')]
        self.dfs(root, 1, res)
        return res[0]  

''' time complexity : O(n)            # DFS solution       
    space complexity : O(1)
'''
