class Solution:
def lPalin(self, A):
        h = A 
        slow, fast = A, A
        while fast and fast.next :
            slow = slow.next 
            fast = fast.next.next 
        prev = None 
        while slow :
            next = slow.next 
            slow.next = prev 
            prev = slow 
            slow = next 
        
        while h and prev and h != prev :
            if h.val != prev.val :
                return 0
            h = h.next 
            prev = prev.next 
        
        return 1

''' time complexity : O(n)        
    space complexity : O(1)
'''



# my approach or algorithm 

1.find mid point with help of slow and fast pointers 
2.reverse second half of list (from mid node)
3.traverse from both ends of list untill we found mid node (or crossing nodes)
4.return 1 (True) if we found same values from both ends if not at any node return immediatly 0 (False)
