class Solution:
    def solve(self, A, B):
        if not A and not B : return A 
        
        if A and not B : return A 
        if not A and B : return B 
        
        A.val = A.val + B.val 
        A.left = self.solve(A.left, B.left)
        A.right = self.solve(A.right, B.right)
        
        return A 
        
''' time complexity : O(n)   # modifying into A tree instead of New tree
    space complexity : O(1)   
'''    



###########################################################################################################################################################################################################





class Solution:
    def solve(self, A, B):
        if A and B:
            root = TreeNode(A.val+B.val)
            root.left = self.solve(A.left, B.left)
            root.right = self.solve(A.right, B.right)
            return root 
        elif A :
            return A
        elif B :
            return B 

''' time complexity : O(n)         # creating a new tree 
    space complexity : O(n)   
'''
