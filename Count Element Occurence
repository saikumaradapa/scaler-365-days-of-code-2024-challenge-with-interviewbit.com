class Solution:
    def findFirst(self, A, B):
        res = None 
        l, r = 0, len(A)-1
        while l<=r:
            mid = (l+r) >> 1
            if A[mid] == B:
                res = mid 
                r = mid - 1
            elif A[mid] < B:
                l = mid + 1
            else:
                r = mid - 1
                
        return res 
        
        
    def findLast(self, A, B):
        res = None 
        l, r = 0, len(A)-1
        while l<=r:
            mid = (l+r) >> 1
            if A[mid] == B:
                res = mid 
                l = mid + 1
            elif A[mid] < B:
                l = mid + 1
            else:
                r = mid - 1
                
        return res     

	def findCount(self, A, B):
        
        left, right = self.findFirst(A, B), self.findLast(A, B)

        if left == None and right == None : return 0
        if left == None or right == None : return 1
        
        return right-left+1
        
        
''' time complexity : O(2 * logn)        
    space complexity : O(1)
'''
