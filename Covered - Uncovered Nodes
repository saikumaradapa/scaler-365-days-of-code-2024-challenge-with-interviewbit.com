from collections import deque
class Solution:
    def coveredNodes(self, A):
        q = deque([A])
        cover, uncover =0 ,0
        while q :
            n = len(q)
            level = []
            for _ in range(n):
                node = q.popleft()
                if node:
                    level.append(node.val)
                    
                    q.append(node.left)
                    q.append(node.right)
            if len(level) > 2:
                uncover += level[0] + level[-1]
                cover += sum(level) - level[0] - level[-1]
            else:
                uncover += sum(level)
        return abs(cover - uncover)
        
''' time complexity : O(n)        # we can eliminate level list with help of a counter variable in each level of Tree
    space complexity : O(n)
'''
