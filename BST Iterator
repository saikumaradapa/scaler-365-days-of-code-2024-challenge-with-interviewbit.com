class BSTIterator:
    def __init__(self, root):
        self.stack = []
        while root :
            self.stack.append(root)
            root = root.left 
        
    # O(1)
    def hasNext(self):
        return True if self.stack else False 
        
    # O(n)
    def next(self):
        node = self.stack.pop()
        curr = node.right 
        while curr :
            self.stack.append(curr)
            curr = curr.left 
        return node.val 


''' time complexity : O(n)
    space complexity : O(h)
'''
