class Solution:
    def findMid(self, h) :
        slow, fast = h, h.next 
        while fast and fast.next :
            slow, fast = slow.next, fast.next.next 
        return slow
        
	def sortList(self, A):
        if not A or not A.next :
            return A 
        
        left = A 
        temp = self.findMid(A)
        right = temp.next 
        temp.next = None 
        
        left = self.sortList(left)
        right = self.sortList(right)
        
        return self.merger(left, right)
    
    def merger(self, left, right) :
        tail = dummy = ListNode(-1)
        while left and right :
            if left.val <= right.val :
                tail.next = left 
                left = left.next 
            else :
                tail.next = right
                right = right.next 
            tail = tail.next 
        
        if left :
            tail.next = left
        if right :
            tail.next = right        
        return dummy.next 
            
''' time complexity : O(n logn)                 dividing logn and merging n comparisions                     
    space complexity : O(1)
'''
