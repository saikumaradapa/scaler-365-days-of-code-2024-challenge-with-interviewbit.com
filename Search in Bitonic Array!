class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        def binary_search(A, low, high, key, ascending=True):
            while low <= high:
                mid = low + (high - low) // 2
                if A[mid] == key:
                    return mid
                if ascending:
                    if A[mid] < key:
                        low = mid + 1
                    else:
                        high = mid - 1
                else:
                    if A[mid] < key:
                        high = mid - 1
                    else:
                        low = mid + 1
            return -1
        
        # Find the peak element (bitonic point)
        low, high = 0, len(A) - 1
        while low < high:
            mid = low + (high - low) // 2
            if A[mid] > A[mid + 1]:
                high = mid
            else:
                low = mid + 1
        peak_index = low
        
        # Perform binary search on both sides of the peak
        left_search = binary_search(A, 0, peak_index, B)
        right_search = binary_search(A, peak_index + 1, len(A) - 1, B, ascending=False)
        
        # Return the index if found, otherwise return -1
        return left_search if left_search != -1 else right_search
